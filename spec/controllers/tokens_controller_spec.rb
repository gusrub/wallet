require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TokensController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Token. As you add validations to Token, be sure to
  # adjust the attributes here as well.
  let!(:user) { FactoryBot.create(:user, password: "Testing@123!", password_confirmation: "Testing@123!") }
  let(:valid_attributes) {
    FactoryBot.attributes_for(:token, token_type: 'authentication').merge({user: { email: user.email, password: "Testing@123!"}})
  }

  let(:invalid_attributes) {
    {
      token: nil,
      type: nil,
      user: {
        email: nil,
        password: nil
      }
    }
  }

  describe "POST #create" do
    let(:params) { { token: valid_attributes, format: :json } }
    subject { post :create, params: params }

    context "with valid params" do
      it "creates a new Token" do
        expect { subject }.to change(Token, :count).by(1)
      end

      it "renders a JSON response with the new token" do
        subject
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(token_url(Token.last))
      end
    end

    context "with invalid params" do
      let(:params) { { token: invalid_attributes, format: :json } }
      it "renders a JSON response with errors for the new token" do
        subject
        expect(response).to have_http_status(:bad_request)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe "GET #show" do
    let!(:token) { FactoryBot.create(:token) }
    let(:params) { {id: token.id, format: :json} }
    subject { get :show, params: params }

    it "returns a success response" do
      subject
      expect(response).to be_success
    end
  end

end
