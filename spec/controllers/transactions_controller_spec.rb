require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TransactionsController, type: :controller do

  let(:sender) { FactoryBot.create(:user_with_cards) }
  let(:receiver) { FactoryBot.create(:user_with_cards) }
  let(:internal_account) { FactoryBot.create(:account, account_type: Account.account_types[:internal]) }

  let(:valid_attributes) {
    {
      "amount": 1000,
      "transaction_type": "transfer",
      "description": "A test transfer",
      "transferable": {
        "id": receiver.account.id
      }
    }
  }

  let(:invalid_attributes) {
    {
      "amount": nil,
      "transaction_type": nil,
      "description": nil,
      "transferable": {
        "id": nil
      }
    }
  }

  let(:params) { { format: :json, user_id: sender.id } }
  let!(:fees) do
    FactoryBot.create(:fee, description: "Fee 1", lower_range: 0, upper_range: 1000, flat_fee: 8, variable_fee: 3)
    FactoryBot.create(:fee, description: "Fee 2", lower_range: 1001, upper_range: 5000, flat_fee: 6, variable_fee: 2.5)
    FactoryBot.create(:fee, description: "Fee 3", lower_range: 5001, upper_range: 10000, flat_fee: 4, variable_fee: 2)
    FactoryBot.create(:fee, description: "Fee 4", lower_range: 10001, upper_range: 99999999.99, flat_fee: 3, variable_fee: 1)
    Fee.all
  end
  let!(:default_account) { FactoryBot.create(:account, account_type: 'internal') }

  before :each do
    sender.account.update_attributes(balance: 3000)
    receiver.account.update_attributes(balance: 1000)
  end

  describe "GET #index" do
    let!(:resource) { FactoryBot.create_list(:transaction, 5, user: sender) }
    subject { get :index, params: params}

    context "Authenticated with admin user" do
      include_context "authenticated user", :admin

      it_behaves_like "paginated endpoint"
      it "returns a success response" do
        subject
        expect(response).to be_success
      end
    end

    context "Authenticated with customer user" do
      include_context "authenticated user", :customer

      context "for authorized user" do
        let(:params) { { user_id: authenticated_user.id, format: :json } }

        it "returns a success response" do
          subject
          expect(response).to be_success
        end
      end

      context "for unauthorized user" do
        it "returns authorization error" do
          subject
          expect(response).to be_forbidden
        end
      end
    end

    context "Not authenticated" do
      it "returns authentication error" do
        subject
        expect(response).to be_unauthorized
      end
    end
  end

  describe "GET #show" do
    let!(:transaction) { FactoryBot.create(:transaction, user: sender) }
    let(:params) { { user_id: sender.id, id: transaction.id, format: :json} }
    subject { get :show, params: params }

    context "Authenticated with admin user" do
      include_context "authenticated user", :admin
      it "returns a success response" do
        subject
        expect(response).to be_success
      end
    end

    context "Authenticated with customer user" do
      include_context "authenticated user", :customer

      context "for authorized user" do
        let!(:transaction) { FactoryBot.create(:transaction, user: authenticated_user) }
        let(:params) { { user_id: authenticated_user.id, id: transaction.id, format: :json } }

        it "returns a success response" do
          subject
          expect(response).to be_success
        end
      end

      context "for unauthorized user" do
        it "returns authorization error" do
          subject
          expect(response).to be_forbidden
        end
      end
    end

    context "Not authenticated" do
      it "returns authentication error" do
        subject
        expect(response).to be_unauthorized
      end
    end
  end

  describe "POST #create" do
    let(:params) { { user_id: sender.id, transaction: valid_attributes, format: :json } }
    subject { post :create, params: params }

    context "Authenticated with admin user" do
      include_context "authenticated user", :admin

      context "with valid params" do
        it "creates a new Transaction" do
          expect { subject }.to change(Transaction, :count).by(3)
        end

        it "renders a JSON response with the new transaction" do
          subject
          expect(response).to have_http_status(:created)
          expect(response.content_type).to eq('application/json')
          expect(response.location).to eq(user_transaction_url(sender, Transaction.where(transaction_type: Transaction.transaction_types[:transfer]).last))
        end
      end

      context "with invalid params" do
        let(:params) { { user_id: sender.id, transaction: invalid_attributes, format: :json} }
        subject { post :create, params: params }

        it "renders a JSON response with errors for the new transaction" do
          subject
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json')
        end
      end
    end

    context "Authenticated with customer user" do
      include_context "authenticated user", :customer

      context "for authorized user" do
        let(:params) { { user_id: authenticated_user.id, transaction: valid_attributes, format: :json } }
        it "returns a success response" do
          subject
          expect(response).to be_success
        end
      end

      context "for unauthorized user" do
        it "returns authorization error" do
          subject
          expect(response).to be_forbidden
        end
      end
    end

    context "Not authenticated" do
      it "returns authentication error" do
        subject
        expect(response).to be_unauthorized
      end
    end
  end

end
