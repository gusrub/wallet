require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TransactionsController, type: :controller do

  let(:sender) { FactoryGirl.create(:user_with_cards) }
  let(:receiver) { FactoryGirl.create(:user_with_cards) }
  let(:internal_account) { FactoryGirl.create(:account, account_type: Account.account_types[:internal]) }

  let(:valid_attributes) {
    {
      "amount": 1000,
      "transaction_type": "transfer",
      "description": "A test transfer",
      "transferable": {
        "id": receiver.account.id
      }
    }
  }

  let(:invalid_attributes) {
    {
      "amount": nil,
      "transaction_type": nil,
      "description": nil,
      "transferable": {
        "id": nil
      }
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TransactionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let(:params) { { format: :json, user_id: sender.id } }

  before :each do
    sender.account.update_attributes(balance: 3000)
    sender.account.update_attributes(balance: 1000)
  end

  describe "GET #index" do
    let!(:resource) { FactoryGirl.create_list(:transaction, 5, user: sender) }
    subject { get :index, params: params, session: valid_session }
    it_behaves_like "paginated endpoint"
    it "returns a success response" do
      subject
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      transaction = FactoryGirl.create(:transaction, user: sender)
      get :show, params: params.merge({id: transaction.to_param}), session: valid_session
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Transaction" do
        expect {
          post :create, params: params.merge({transaction: valid_attributes}), session: valid_session
        }.to change(Transaction, :count).by(1)
      end

      it "renders a JSON response with the new transaction" do

        post :create, params: params.merge({transaction: valid_attributes}), session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(user_transaction_url(sender, Transaction.last))
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the new transaction" do

        post :create, params: params.merge({transaction: invalid_attributes}), session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

end
